
(setq visible-bell t)
(setq inhibit-startup-message t)
(setq gnus-inhibit-startup-message t) 
(setq column-number-mode t) 

(setq mouse-yank-at-point t)

(auto-image-file-mode)

(mouse-avoidance-mode 'animate)

(setq frame-title-format "emacs@%b")

(global-font-lock-mode t)

(add-to-list 'load-path "~/lisp/color-theme")
(require 'color-theme) 
 (color-theme-initialize)
(color-theme-gnome2)

(tool-bar-mode nil) 
(blink-cursor-mode -1) 
(transient-mark-mode 1) 
(scroll-bar-mode nil) 
(fset 'yes-or-no-p 'y-or-n-p)
(setq resize-mini-windows t) 
(show-paren-mode 1) 
(mouse-wheel-mode t) 


(setq scroll-step 1 
scroll-margin 3 
scroll-conservatively 10000) 


(add-to-list 'load-path "~/lisp/auto-complete")
    (require 'auto-complete)
    (require 'auto-complete-config)
 (global-auto-complete-mode t) 
 (setq truncate-lines t)
 
(put 'downcase-region 'disabled nil)
(require 'ibuffer)
(global-set-key [f7] 'ibuffer)
(global-set-key [f8] 'shell)
(global-set-key [f9] 'dired)

;;时间显示设置 
;;启用时间显示设置，在minibuffer上面的那个杠上（忘了叫什么来着） 
(display-time-mode 1) 
;;时间使用24小时制 
(setq display-time-24hr-format t) 
;;时间显示包括日期和具体时间 
(setq display-time-day-and-date t) 
;;时间栏旁边启用邮件设置 
;;(setq display-time-use-mail-icon t) 
;;时间的变化频率，单位多少来着？ 
(setq display-time-interval 10) 
;;允许emacs和外部其他程序的粘贴 
(setq x-select-enable-clipboard t) 


(add-to-list 'load-path "~/lisp/git-emacs")
(require 'git-emacs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(setq auto-mode-alist (cons '("\\.lua$" . lua-mode) auto-mode-alist))
;(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
;;需要颜色
;(add-hook 'lua-mode-hook 'turn-on-font-lock)
;;隐藏某段
; (add-hook 'lua-mode-hook 'hs-minor-mode)


; 一键在emacs中切换C++ .h文件和.cpp文件
;; Author:Tatsuhiko Kubo
 ;; This elisp can keeping in touch between header file and source file for C or C++
 
 ;; This program is free software; you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation; either version 2, or (at your option)
 ;; any later version.
 
 
 (defun c-open-relational-file-get-opened-file-name-prefix (file-name)
   (string-match "/\\([^./]+\\)\\.[^.]+$" file-name)
   (match-string 1 file-name))
 
 (defun c-open-relational-file-get-ext-type (file-name)
   (string-match "\\.\\([^.]+\\)$" file-name)
   (match-string 1 file-name))
 
 (defun c-open-relational-file-get-opening-file-name (file-name-prefix ext-list)
   (let ((opening-file-name (concat file-name-prefix "." (car ext-list))))
     (cond ((null (car ext-list))             nil)
 	  ((file-exists-p opening-file-name) opening-file-name)
 	  (t                                 (c-open-relational-file-get-opening-file-name file-name-prefix 
 											   (cdr ext-list))))))
 
 (defun c-open-relational-file (how-open-type)
   "keeping in touch between header file and source file for C or C++"
   (interactive "nOpen-Type 1:elscreen,2:split; ")
   (let* ((c-or-cpp-header-map (list "c" "cpp" "cxx" "cc" "c++" "C"))
 	 (c-source-map        (list "h" "s"))
 	 (asm-source-map      (list "c"))
 	 (cpp-source-map      (list "hpp" "h" "hxx" "h++" "hh" "H"))
 	 (cpp-header-map      (list "cpp" "cxx" "cc" "c++" "C"))
 	 (ext-map (list
 		   (cons "h"   c-or-cpp-header-map)
 		   (cons "c"   c-source-map)
 		   (cons "s"   asm-source-map)
 		   (cons "C"   cpp-source-map)
 		   (cons "cc"  cpp-source-map)
 		   (cons "cpp" cpp-source-map)
 		   (cons "cxx" cpp-source-map)
 		   (cons "c++" cpp-source-map)
 		   (cons "H"   cpp-header-map)
 		   (cons "hh"  cpp-header-map)
 		   (cons "hpp" cpp-header-map)
 		   (cons "hxx" cpp-header-map)
 		   (cons "h++" cpp-header-map)))
 	 (opened-file-name (buffer-file-name (window-buffer)))
 	 (opened-file-name-prefix (c-open-relational-file-get-opened-file-name-prefix opened-file-name))
 	 (opened-file-ext-type (c-open-relational-file-get-ext-type opened-file-name))
 	 (opening-file-ext-type-list (cdr (assoc opened-file-ext-type ext-map)))
 	 (opening-file-name (c-open-relational-file-get-opening-file-name opened-file-name-prefix
 									  opening-file-ext-type-list))
 	 (opening-file-buffer (if (null opening-file-name)
 				  nil
 				(find-file-noselect opening-file-name))))
     (if (null opening-file-buffer)
 	(message "not found relational file")
       (cond ((= how-open-type 1) (switch-to-buffer opening-file-buffer))
 	    ((= how-open-type 2) (progn (split-window-horizontally)
 					(other-window 1)
 					(switch-to-buffer opening-file-buffer)))
 	    (t                   (message "Illegal Type"))))))




(global-set-key [f11] 'c-open-relational-file)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Erlang mode
(add-to-list 'load-path "~/lisp/erlang")
(setq erlang-root-dir "c:/Program Files/erl5.8.4")
(setq exec-path (cons "c:/Program Files/erl5.8.4/bin" exec-path))
(require 'erlang-start)

;; Distel
;; http://sourceforge.net/projects/distel/
;;svn checkout http://distel.googlecode.com/svn/trunk/ distel
(add-to-list 'load-path "c:/Program Files/erl5.8.4/lib/distel-4.03/elisp")
(require 'distel)
(distel-setup)
 
;; Some Erlang customizations
(add-hook 'erlang-mode-hook
  (lambda ()
  ;; when starting an Erlang shell in Emacs, default in the node name
    (setq inferior-erlang-machine-options '("-sname" "emacs"))
    ;; add Erlang functions to an imenu menu
    (imenu-add-to-menubar "imenu")))
;; A number of the erlang-extended-mode key bindings are useful in the shell too
(defconst distel-shell-keys
  '(("\C-\M-i"   erl-complete)
    ("\M-?"      erl-complete) 
    ("\M-."      erl-find-source-under-point)
    ("\M-,"      erl-find-source-unwind) 
    ("\M-*"      erl-find-source-unwind) 
    )
  "Additional keys to bind when in Erlang shell.")
(add-hook 'erlang-shell-mode-hook
   (lambda ()
     ;; add some Distel bindings to the Erlang shell
     (dolist (spec distel-shell-keys)
       (define-key erlang-shell-mode-map (car spec) (cadr spec)))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


