emacs 中配置erlang 的开发环境

erlang + emacs + distel-4.03

erlang elisp 
/erl_HOME/lib/tools-2.6.6.4/emacs

distel-4.03 elisp
下载distel

在 .emacs 中加入下面的
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Erlang mode
(add-to-list 'load-path "~/lisp/erlang")
(setq erlang-root-dir "c:/Program Files/erl5.8.4")
(setq exec-path (cons "c:/Program Files/erl5.8.4/bin" exec-path))
(require 'erlang-start)

;; Distel
;; http://sourceforge.net/projects/distel/
;;svn checkout http://distel.googlecode.com/svn/trunk/ distel
(add-to-list 'load-path "c:/Program Files/erl5.8.4/lib/distel-4.03/elisp")
(require 'distel)
(distel-setup)
 
;; Some Erlang customizations
(add-hook 'erlang-mode-hook
  (lambda ()
  ;; when starting an Erlang shell in Emacs, default in the node name
    (setq inferior-erlang-machine-options '("-sname" "emacs"))
    ;; add Erlang functions to an imenu menu
    (imenu-add-to-menubar "imenu")))
;; A number of the erlang-extended-mode key bindings are useful in the shell too
(defconst distel-shell-keys
  '(("\C-\M-i"   erl-complete)
    ("\M-?"      erl-complete) 
    ("\M-."      erl-find-source-under-point)
    ("\M-,"      erl-find-source-unwind) 
    ("\M-*"      erl-find-source-unwind) 
    )
  "Additional keys to bind when in Erlang shell.")
(add-hook 'erlang-shell-mode-hook
   (lambda ()
     ;; add some Distel bindings to the Erlang shell
     (dolist (spec distel-shell-keys)
       (define-key erlang-shell-mode-map (car spec) (cadr spec)))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


/   浮点数 
div 整数除法
rem 整数除法取余数

变量 第一个字母大写
原子 原子是一串以小写字母开头，后跟数字字母或下滑线(_)或邮件符号(@)的字符，使用单引号引起来的字符也是原子
元组 将若干个以逗号分割的值用一对花括号引起来
列表 将若干个以逗号分割的值用一对方括号引起来 定义列表 ［H|T］

列表解析 记号[F(X)||X<-L]代表 由F(X) 组成的列表，其中X是取值于列表L
lists:map(fun(X)->2*X end,example1:qsort(L)).
[2*X||X<-L].
[2*X||X<-example1:qsort(L)].
% erlang qsort 
qsort([])->
    [];
qsort([Pivot|T]) ->
    qsort([X||X<-T,X<Pivot]) 
        ++[Pivot]++ 
        qsort([X||X<-T,X>=Pivot]).




操作       描述                                                   参数类型       优先级
Op        Description                                            Argument Type	Priority                                                                           
+X        +X                                                     Number         1                
-X        -X                                                     Number         1                
X*Y       X*Y                                                    Number         2                
X/Y       X / Y(floating-point division)(浮点数相除)              Number       	2               
bnot X    Bitwise not of X(对X按位取反)                           Integer	2               
X div Y   Integer division of X and Y(X整除Y)                    Integer	2               
X rem Y   Integer remainder of X divided by Y(X除Y取余数)        Integer        	2               
X band Y  Bitwise and of X and Y(对X和Y按位取与)                  Integer	2               
X+Y       X+Y                                                   Number          3                
X-Y       X-Y                                                    Number         3                
X bor Y   Bitwise or of X and Y(对X和Y按位取或)                   Integer	3               
X bxor Y  Bitwise xor of X and Y(对X和Y按位进行异或)               Integer	3               
X bsl N   Arithmetic bitshift left of X by N bits(对X按位左移N位) Integer	3               
X bsr N   Bitshift right of X by N bits(对X按位右移N位)           Integer	3                                                                                   


断言      

可以在函数定义的头部使用断言，此时断言必须使用以关键字when开头，也可以在任何语言中允许使用表达式的地方是使用断言。当断言用于表达式的时候，他们会被求值为原子true或false

断言序列
可以用分号；分开断言集合，当断言集合中有一个断言为真的时候，整个断言集合都为真
可以用逗号，分开断言集合，当所有的断言都为真的时候，断言集合才为真

合法的断言表达式只是合法的erlang表达式的子集。为了保证断言没有副作用，断言不能使用用户定义的布尔表达式，因为无法确定是哦否没有副作用，也不能保证是否能从函数中退出
下面是断言的合法的语法形式。
原子true，
其他常量(条件或绑定变量)，这些在断言表达式中都会被求值为false，
断言谓词，BIF，
比较表达式，
算数表达式，
布尔biaods，
短路布尔表达式。

断言谓词

谓词                                	 含义
is_atomic(X)                            X是原子
is_binay(X)                             X是二进制数据
is_constant(X)                          X是常数
is_float(X)                             X是浮点数
is_integer(X)                           X是整数
is_list(X)                              X是列表
is_number(X)                            X是整数或浮点数
is_pid(X)                               X是进程标识符
is_port(X)                              X是端口
is_reference(X)                         X是引用
is_function(X)                          X是函数
is_function(X,N)                        X是有N个参数的函数
is_tuple(X)                             X是元组
is_record(X,Tag)                        X是标记为Tag的记录
is_record(X,Tag,N)                      X是标记为Tag大小为N的记录      

断言BIF
函数                                    含义
abs(X)                                  X的绝对值
element(X，N)                           元组X的第N个元素
float(X)                                将数字X转换为浮点数
hd(X)                                   列表X的头部
length(X)                               列表X的长度
node()                                  当前节点
node(X)                                 创建X的节点，X可以是进程标识符、引用或端口
round(X)                                将数字X转换为整数(四舍五入)
self()                                  当前进程标识符
size(X)                                 X的大小，X为元组或二进制数据
trunc(X)                                将数字X转换为整数(截取)
tl(X)                                   列表X的尾部 

短路布尔表达式

and andalso
or orelse





记录

记录(record)就是提供一种方法把一个名称与元组中的元素对应起来
－record(Name,{
    %% 有默认值的
    Key1 = Default1,
    Key1 = Default2,
    ...
    %% 没有默认值
    Key3,
    ...}).


异常 

try 
catch
after
end


二进制
二进制数据以一个整数或者字符序列的形式出现，两端分别用两个小于号和两个大于号括起来
<<1,2,3,4>>.
<<"dwedewfr3d">>.

操作二进制的BIF

@spec list_to_binary(IoList)->binary()
@spec split_binary(Bin,Pos)->{Bin1,Bin2}

@spec term_to_binary(Term)->Bin
@spec binary_to_term(Bin)->Term


比特语法
比特语法表达式有如下形式
<<>>
<<>E1，E2，...,En>
每一个元素Ei代表二进制数据中的一个单独区块。每一个元素Ei都有如下4种形式:
E＝ Value |
    Value:Size |
    Value/TypeSpeciferList|
    Value:Size?TypeSpeciferList
无论使用哪种形式，二进制数据中的总比特数必须要恰好被8整除

而TypeSpecifierList有这样的格式：End-Sign-Type-Unit，
@type End = big | little | native，默认big，这个就是所谓的大头(big)、下头(little)，而native取决于本地系统
@type Sign = signed | unsigned，默认unsigned
@type Type = integer | float | binary，默认integer
@type Unit = 1 | 2 | ... 255，默认取决于Type，如果Type为integer或者float则Unit为1；为binary则Unit为8
另外，
Size是表示一个单元（Unit）的位数（bit），默认情况，如果Type为integer则Size为8；为float则Size为64，为binary则为二进制的长度（就是说为当前二进制值的长度）
（关心默认值有助于你对具体应用中的数值变化的理解或者使用）

例子 
{<<16#12345678:32/big>>,<<16#12345678:32/little>>, <<16#12345678:32/native>>,<<16#12345678:32>>}.
{<<18,52,86,120>>,<<120,86,52,18>>, <<120,86,52,18>>,<<18,52,86,120>>}     


mark 
file:read_file()
用~有可能找不到路径


apply
BIF apply (Mod,func, Arg1,Arg2,..,ArgN).



循环匹配取值
L = [{Key1,Val1},{Key2,Val2},...{KeyN,ValN}]

查找Key4,的Val4 
Val = lookup(Key4,L).

lookup(Key,[Key,Val|_] ) -> {ok, Val};
lookup(Key,[_|T])->lookup(Key,T);
lookup(_,[])->error.                       



块表达式

begin
 Expr1,
 ...
 ExprN
end

可以使用块表达式把一串表达式组织成一个类似子句的实体。begin ... end块的值就是块表达式中最后一个表达式的值


布尔表达式

not B1;
B1 and B2
B1 or B2
B1 xor B2


包含文件

-include(FileName).
-include_lib(FileName). %%引入库中的包含文件
可以包含扩展名为.hrl的包含文件
 

宏
-define(Constant, Replacement).
-define(Func(Var1,Var2,..,Var), Replacement).

example:
-define(macro1(X,Y), {a,X,Y}).
foo(A)-> ?mcro1(A+10,b).

?FILE 当前文件名
?MODULE 当前模块
?LINE 当前行

-undef(Macro).
-ifdef(Macro).
-ifndef(Macro).
-else
-endif

example:

-ifdef(debug)
-define(TRACE(X),io:format("TRACE ~p:~p ~p~n",[?Module, ?FILE ,?LINE, X])).
-else
-define(TRACE(X),void).
-endif 


在模式中使用匹配操作符


数值类型
1，整型
（1）传统语法：
（2）K进制整数： k#Digits  2#10101002, 8#123157123, 16 #ffff 最高到 36进制
（3）$语法：语法$C表示ASCII字符C 整数值，$a = 97  $\n = 10 $\^c = 3
2，浮点型
Erlang可表示的浮点数的范围是-10^323 ~ 10 ^308


进程字典
@spec put(Key, Value)->Value.
@spec get(Key)->Value.
@spec get()->[{Key,Value}].
@spec get_keys(Value)->[Key].
@spec erase(Key)->Value.
@spec erase()->[{Key,Value}].
如字典个存在键Key对应的值，那么返回对应的值，否则返回原子undefined
如果使用进程字典，代码将不在是没有副作用的

引用
BIF erlang:make_ref()