* zeromq3-0
消息队列
https://github.com/zeromq/zeromq3-0
git clone git://github.com/zeromq/zeromq3-0.git



* pyzmq
python 封装消息队列zmq
https://github.com/zeromq/pyzmq
git clone git://github.com/zeromq/pyzmq.git

* luazmq
lua 封装消息队列zmq
https://github.com/iamaleksey/lua-zmq
git clone git://github.com/iamaleksey/lua-zmq.gitx
   
* python
python git源码
https://github.com/python-git/python
git clone git://github.com/python-git/python.git

* cpyhon
python 的c模块生成 
https://github.com/cython/cython
git clone git://github.com/cython/cython.git

* luaJIT-2.0 
lua 的jit 生成二进制代码
git clone http://luajit.org/git/luajit-2.0.git

* memcached
http://github.com/memcached/memcached
git clone git://github.com/memcached/memcached.git

* redis
git clone git://github.com/antirez/redis.git


* luabind
https://github.com/luabind/luabind
git clone git://github.com/luabind/luabind.git

* v8
http://code.google.com/p/v8
git clone git://github.com/v8/v8.git

* gyp
v8 build needed
git clone git://github.com/martine/gyp.git

* google-sparsehash 
http://code.google.com/p/google-sparsehash/
svn checkout http://google-sparsehash.googlecode.com/svn/trunk/ google-sparsehash-read-only

* google-perftools
http://code.google.com/p/google-perftools/
svn checkout http://google-perftools.googlecode.com/svn/trunk/ google-perftools-read-only

* erlang
git clone git://github.com/erlang/otp.git
** how build erlang 
./ otp_build  setup

* yaws
使用erlang的httpserver
git clone git://github.com/dimitri/el-get.git

* mochiweb
使用erlang的httpserver
git clone git://github.com/mochi/mochiweb.git

* textmate erlang.tmbundle
textmate的erlang 插件
svn co http://svn.textmate.org/trunk/Bundles/Erlang.tmbundle

* amf3cplusplus
c++ 的amf3
svn checkout http://amf3cplusplus.googlecode.com/svn/trunk/ amf3cplusplus-read-only

* el_get
emacs 的插件管理
git clone git://github.com/dimitri/el-get.git

* how to use git
git config --global user.name 
git config --global user.email "your_email@youremail.com"

ssh-keygen -t rsa -C "your_email@youremail.com"
git push origin master


* how to commit to git 
git add (newfile)
git add --update  (modifiedfile)
git commit -m "(info)"
git push 

* how to update 
git pull


chrome://net-internals/#requests


* golang

**  download &install mercurial

http://mercurial.selenic.com/


*** Clone a project and push changes

$ hg clone http://selenic.com/repo/hello
$ cd hello
$ (edit files)
$ hg add (new files)
$ hg commit -m 'My changes'
$ hg push

*** Create a project and commit

$ hg init (project-directory)
$ cd (project-directory)
$ (add some files)
$ hg add
$ hg commit -m 'Initial commit'


** download & install  go 
*** download 
hg clone -u release https://go.googlecode.com/hg/ go

*** install
cd go/src
$ ./all.bash


https://www.flyproxy.com/

